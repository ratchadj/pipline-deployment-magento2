def app
pipeline {
    agent any
    environment {
        version = "1.0.0"
    }
    stages{
        stage('clean workspace') {
            steps{
                cleanWs()
            }
        }
        stage('Initialize'){
            steps{
                script {
                    def dockerHome = tool 'myDocker'
                    def nodejsHome  = tool 'myNodejs'
                    env.PATH = "${dockerHome}/bin:${nodejsHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Environment') {
            steps{
                script {
                    sh 'git --version'
                    echo "Branch: ${env.BRANCH_NAME}"
                    echo "ChangeId: ${env.CHANGE_ID}"
                    echo "ChangeTarget: ${env.CHANGE_TARGET}"
                    sh 'docker -v'
                    sh 'printenv'
                    sh 'docker container ls'
                }
            }
        }
        stage('Build image') {
            steps{
                script {
                    /* This builds the actual image; synonymous to
                    * docker build on the command line */
                    app = docker.build("ratchadj2016/oms")
                }
            }
        }
        stage('Push image') {
            steps{
                script {
                    /* Finally, we'll push the image with two tags:
                    * First, the incremental build number from Jenkins
                    * Second, the 'latest' tag.
                    * Pushing multiple tags is cheap, as all the layers are reused. */
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        app.push(version)
                        app.push("latest")
                    }
                }
            }
        }
        stage('Clean docker test'){
            steps{
                script {
                    sh 'docker rmi registry.hub.docker.com/ratchadj2016/oms:${version}'
                    sh 'docker rmi ratchadj2016/oms:latest'
                }
            }
        }
    }
    post {
        success {
            echo 'The Pipeline success :)'
        }
        failure { 
            script {
                echo 'The Pipeline failed :('
                // slackSend color: 'danger', message: "$JOB_NAME - Failed #$BUILD_NUMBER (<$BUILD_URL|Open>)"
            }
        }
    }
}